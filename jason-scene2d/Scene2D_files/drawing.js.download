class Scene2D extends Two {
    constructor(canvasId='canvas', w=585, h=500) {
        super({
            width: w,
            height: h
        })
        this.elem = document.getElementById(canvasId)
        this.appendTo(this.elem)
        this.elem.style.backgroundColor='rgb(10,50,50)'
        this.children=this.scene.children.ids
        this.on("dblclick", function (e) {
            let center = this.position (e)
            new Ball (this, center.x, center.y, 50)
            }
        )
    }
    //events: click,mousedown,mousemove,mouseup
    on(event, callback) {
        this.elem["on" + event] = callback.bind(this)
    }
    off(event) {
        this.elem["on" + event] = null
    }
    position(e) {
        let bbox = this.elem.getBoundingClientRect()
        return {
            x: e.x - bbox.x * this.width / bbox.width,
            y: e.y - bbox.y * this.height / bbox.height
        }
    }
    clear() {
        for(let c in this.children) {
            this.children[c].stop()
            this.remove(this.children[c])
            this.update()
        }
    }
}

class Circle extends Two.Circle {
    constructor(scene2d, cx=72, cy=100, r=50, color) {
        super(cx, cy, r)

        if (color===undefined) {
            let rc=Math.random()*255
            let gc=Math.random()*255
            let bc=Math.random()*255
            color=`rgb(${rc},${gc},${bc})`
        }
        this.fill = color
        //this.stroke = 'orangered'
        //this.linewidth = 5
        this.scene2d = scene2d

        scene2d.add(this)
        scene2d.update()

        this.elem = this._renderer.elem
        this.position = this.translation
    }
    move(dx, dy) {
        this.translation.x += dx
        this.translation.y += dy
        this.scene2d.update()
    }
    //events: click,mousedown,mousemove,mouseup
    on(event, callback) {
        this.elem["on" + event] = callback.bind(this)
    }
    off(event) {
        this.elem["on" + event] = null
    }

    stop() {
        if(this.interval!==undefined) {
            console.log("stop!")
            clearInterval(this.interval)
        }
    }
}

class Ball extends Circle {
    constructor(scene2d, cx=72, cy=100, r=50, color) {
        super(scene2d, cx, cy, r, color)
        this.start()
        this.on("click", function(e) { this.explode()
        }
        )
    }
      start () {
            let that = this
            if (this.time === undefined) {
                this.dx=1
                this.dy=-1
                this.rx = 0.05
                this.time = setInterval(function(){that.run()}, .2)
            } else {
                clearInterval(this.time)
                delete this.time
                delete this.dx
                delete this.dy
                delete this.rx
            }
      }
      explode () {
          let b1 = new Ball (s, this.position.x, this.position.y, this.radius/4)
          b1.dx = -this.dx
          b1.dy = this.dy
          b1.rx = this.rx
          let b2 = new Ball (s, this.position.x, this.position.y, this.radius/4)
          b2.dx = this.dx
          b2.dy = -this.dy
          b2.rx = this.rx
          let b3 = new Ball (s, this.position.x, this.position.y, this.radius/4)
          b3.dx = -this.dx
          b3.dy = -this.dy
          b3.rx = this.rx
          this.radius = this.radius/4
          this.scene2d.update()
      }
      dilate () {
            if (this.radius < 10) {
                this.rx = 1
            } else if (this.radius >= 100) {
                this.rx = -1}
            this.radius=this.radius+this.rx
            this.scene2d.update()
            }
      run () {
          if (this.radius < 50) {
            this.dilate() 
            }
            if (this.position.x<0) {
                this.dx=1
            } else if (this.position.x>this.scene2d.width) {
                this.dx=-1
            } 
            if (this.position.y<0) {
                this.dy=1
            } else if (this.position.y>this.scene2d.height) {
                this.dy=-1
            } 
            this.move(this.dx, this.dy)
     } 
}

/*

function drawRect(scene2d,x=213,y=100,w=100,h=100,color='rgb(0,200,255)') {
    let rect = scene2d.makeRectangle(x,y,w,h)

    rect.fill=color
    rect.opacity=0.75
    rect.noStroke()

    scene2d.update()

    return rect
}

*/


function setup() {
    s = new Scene2D()
    b1 = new Ball(s,50,50,50)

/*    c1 = new Circle(s)

    c1.on("mousedown", function(e) {
        c1.x = e.x;
        c1.y = e.y;
        c1.on("mousemove", (e)=>{
            c1.move(e.x - c1.x, e.y - c1.y)
            c1.x = e.x;
            c1.y = e.y
        }
        )
    })

    c1.on("mouseup", function() {
        c1.off("mousemove")
        delete c1.x
        delete c1.y
    })

    c1.on("click", function(e) {
        console.log(`click: ${e.x}:${e.y}`)
        if (c1.interval !== undefined) {
            clearInterval(c1.interval);
            delete c1.interval
            delete c1.dx
            delete c1.dy
            return
        }
        c1.dx = 10;
        c1.dy = 10
        c1.interval = setInterval(function() {
            c1.move(c1.dx, c1.dy)
            if (c1.translation.x < 0 && c1.dx < 0) {
                c1.dx = -c1.dx
            }
            if (c1.translation.x > c1.scene2d.width && c1.dx > 0) {
                c1.dx = -c1.dx
            }
            if (c1.translation.y < 0 && c1.dy < 0) {
                c1.dy = -c1.dy
            }
            if (c1.translation.y > c1.scene2d.height && c1.dy > 0) {
                c1.dy = -c1.dy
            }
        }, 50)
    })
*/
/*
    s.on("dblclick", function(e) {
        console.log(`center: ${e.x}:${e.y}`)
        let center = s.position(e)
        new Ball(this,center.x,center.y)
    })
    */
/*
    let c4 = new Circle(s, 10, 400, 60)
c4.dy=1
c4.on("click", function(evt) {
                if (c4.position.y > this.scene2d.height) {
                            c4.dy=-1
                } 
                if(c4.position.y<0) {
                    c4.dy=1
                }
                setInterval(function(){c4.move(0,c4.dy)}, 1)
    }
) */
}

window.onload = setup

