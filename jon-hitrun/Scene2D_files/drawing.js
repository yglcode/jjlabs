class Scene2D extends Two {
    constructor(canvasId='canvas', w=585, h=500) {
        super({
            width: w,
            height: h
        })
        this.balls = []
        this.elem = document.getElementById(canvasId)
        this.appendTo(this.elem)
        this.elem.style.backgroundColor = 'rgb(10   ,50,50)'
        this.children = this.scene.children.ids
        /*
        this.on("mousedown",e=>{
            console.log(e.x+":"+e.y)
            this.on("mousemove",e=>{
            console.log(e.x+":"+e.y)
        })
        })
        this.on("mouseup",e=>{
            console.log(e.x+":"+e.y)
            this.off("mousemove")
        })*/

  /*      this.on("dblclick", e=>{
            let c = this.position(e)
           console.log(c.x + ":" + c.y + "double clicked");
           let main = new Ball(this,c.x,c.y,50)
        }
        )*/

        this.createBoundaries()
        //this.pad = new Line(this,new Point(50,200),new Point(250,200))
        //this.enableDrag()
        this.main = new Ball(this,100,100,60) 
       // this.enableRubberband()
        this.spawnballs()
        //
        this.main.on("mousedown",(e)=>{
	    this.mousedown(e)
	    this.main.on("mousemove",(e)=>this.mousemove(e))
	})
        this.main.on("mouseup",(e)=>{
	    this.mouseup(e)
	    this.main.off("mousemove")
	})
        this.main.on("touchdown",(e)=>{
	    e.preventDefault()
	    pos={x:e.changedTouches[0].pageX,y:e.changedTouches[0].pageY}
	    this.mousedown(pos)
	    this.main.on("touchmove",(e)=>{
		e.preventDefault()
		pos={x:e.changedTouches[0].pageX,y:e.changedTouches[0].pageY}
		this.mousemove(pos)
	    })
	})
        this.main.on("touchup",(e)=>{
	    e.preventDefault()
	    pos={x:e.changedTouches[0].pageX,y:e.changedTouches[0].pageY}
	    this.mouseup(pos)
	    this.main.off("touchmove")
	})
        this.main.on("touchcancel",(e)=>{
	    e.preventDefault()
	    pos={x:e.changedTouches[0].pageX,y:e.changedTouches[0].pageY}
	    this.mouseup(e)
	    this.main.off("touchmove")
	})
 //       this.enableBallDrag()

    }
    mousedown(e) {
            this.ballpos = this.position(e)
    }
    mousemove(e) {
        let pos= this.position(e)
        let diff = {
            x: pos.x - this.ballpos.x,
            y: pos.y - this.ballpos.y
        }
        this.ballpos = pos
        this.main.move(diff.x, diff.y)
        this.bounce()
        this.update()
    }
    mouseup(e) {
        if (this.ballpos !== undefined){
            let pos= this.position(e)
            let diff = {
                x: pos.x - this.ballpos.x,
                y: pos.y - this.ballpos.y
            }
            this.ballpos = pos
            this.main.move(diff.x, diff.y)
            this.update()
        }
        delete this.ballpos
    }
    //events: click,mousedown,mousemove,mouseup
    bounce(){
        for (let i=1; i<this.balls.length;i++){
            let dx = this.balls[i].position.x-this.main.position.x
            let dy = this.balls[i].position.y-this.main.position.y
            let hypo = Math.sqrt(dx*dx+dy*dy)
            if(hypo <= this.main.radius+this.balls[i].radius){
                this.balls[i].dx = dx/15
                this.balls[i].dy = dy/15
		if (this.balls[i].started()===false) {
                    this.balls[i].start()
		}
            }
        }
    }
    on(event, callback) {
        this.elem["on" + event] = callback.bind(this)
    }
    off(event) {
        this.elem["on" + event] = null
    }
    position(e) {
        let bbox = this.elem.getBoundingClientRect()
        return {
            x: e.x - bbox.x * this.width / bbox.width,
            y: e.y - bbox.y * this.height / bbox.height
        }
    }
    balls() {
        let bs = []
        for (let c in this.children) {
            bs.push(this.children[c])
        }
        return bs
    }
    clear() {
        for (let c in this.children) {
            this.children[c].stop()
            this.remove(this.children[c])
            this.update()
        }
    }
    createBoundaries() {
        this.lines = []
        new Line(this,new Point(0,0),new Point(this.width,0))
        new Line(this,new Point(0,0),new Point(0,this.height))
        new Line(this,new Point(0,this.height),new Point(this.width,this.height))
        new Line(this,new Point(this.width,0),new Point(this.width,this.height))
    }

    enableBallDrag() {
        this.on("mousedown", e=>{
            let pos= this.position(e)
            let f = Math.abs(pos.x-this.main.x)
            let g = Math.abs(pos.y-this.main.y) 
            if(Math.sqrt(f*f+g*g)<this.main.radius){
                console.log(this + " was dragged")
                 this.ballpos = this.position(e)
                 this.on("mousemove", e=>{
                    let pos= this.position(e)
                    let diff = {
                        x: pos.x - this.ballpos.x,
                        y: pos.y - this.ballpos.y
                    }
                    this.ballpos = pos
                    this.main.move(diff.x, diff.y)
                    this.update()
                 })
            }
        })
        this.on("mouseup", e=>{
            if (this.ballpos !== undefined){
                let pos= this.position(e)
                    let diff = {
                        x: pos.x - this.ballpos.x,
                        y: pos.y - this.ballpos.y
                    }
                    this.ballpos = pos
                    this.main.move(diff.x, diff.y)
                    this.update()
            }
            this.off("mousemove")
            delete this.ballpos
        })
    }

    enableDrag() {
        this.on("mousedown", e=>{
            let pos= this.position(e)
            if( Math.abs(pos.y - this.pad.pmax.y) < 5 &&
            pos.x > this.pad.pmin.x && 
            pos.x < this.pad.pmax.x ){
                console.log(this + " was dragged")
                 this.barpos = this.position(e)
                 this.on("mousemove", e=>{
                    let pos= this.position(e)
                    let diff = {
                        x: pos.x - this.barpos.x,
                        y: pos.y - this.barpos.y
                    }
                    this.barpos = pos
                    this.pad.moveEnd(1, diff)
                    this.pad.moveEnd(0, diff)
                    this.update()
                 })
            }
        })
        this.on("mouseup", e=>{
            if (this.barpos !== undefined){
                let pos= this.position(e)
                    let diff = {
                        x: pos.x - this.barpos.x,
                        y: pos.y - this.barpos.y
                    }
                    this.barpos = pos
                    this.pad.moveEnd(1, diff)
                    this.pad.moveEnd(0, diff)
                    this.update()
            }
            this.off("mousemove")
            delete this.barpos
        })
    }

    enableRubberband() {
        this.on("mousedown", e=>{
            this.rb_p1 = this.position(e)
            this.on("mousemove", e=>{
                if (this.rubberband === undefined) {
                    this.rb_p2 = this.position(e)
                    this.rubberband = new Line(this,this.rb_p1,this.rb_p2)
                } else {
                    //just move 2nd endpoint
                    let p2 = this.position(e)
                    let diff = {
                        x: p2.x - this.rb_p2.x,
                        y: p2.y - this.rb_p2.y
                    }
                    this.rb_p2 = p2
                    this.rubberband.moveEnd(1, diff)
                }
                this.update()
            }
            )
        }
        )
        this.on("mouseup", (e)=>{
            if (this.rb_p2 !== undefined) {
                let p2 = this.position(e)
                let diff = {
                    x: p2.x - this.rb_p2.x,
                    y: p2.y - this.rb_p2.y
                }
                this.rb_p2 = p2
                let dx = this.rb_p2.x - this.rb_p1.x
                let dy = this.rb_p2.y - this.rb_p1.y
                if (dx < 0) {
                    dx = -dx
                }
                if (dy < 0) {
                    dy = -dy
                }
                if (dx > dy) {
                    diff.y -= this.rb_p2.y - this.rb_p1.y
                } else {
                    diff.x -= this.rb_p2.x - this.rb_p1.x
                }
                this.rubberband.moveEnd(1, diff)
                //this.lines.push(this.rubberband)
                this.update()
            }
            //add new line to this.lines & reset
            this.off("mousemove")
            this.rubberband = undefined
            delete this.rb_p1
            delete this.rb_p2
        }
        )
    }

    savelines() {
            let ls="["
            for (let i=0;i<this.lines.length;i++){
                let l= this.lines[i]
                ls += "[" + l.p0.x +"," +l.p0.y + "," + l.p1.x + "," + l.p1.y + "]"
                if (i !== this.lines.length-1) {
                    ls += ","
                }
            }
            ls += "]"
            return ls
    }
    saveballs() {
            let bs="["
            for (let i=0;i<this.balls.length;i++){
                let b= this.balls[i]
                bs += "[" + b.position.x +"," + b.position.y + "," + b.radius + "]"
                if (i !== this.balls.length-1) {
                    bs += ","
                }
            }
            bs += "]"
            return bs
    }
    spawnballs() {
        for (let i=0; i<29; i++){
            let b = 0
            let a = Math.random()
            if(a<0.33){b = 5} else if (a>0.66){b = 15} else {b = 10}
            new Ball(this,Math.random()*this.width,Math.random()*this.height, b)        }
    }
}

class Circle extends Two.Circle {
    constructor(scene2d, cx=72, cy=100, r=50, color) {
        super(cx, cy, r)

        if (color === undefined) {
            let rc = Math.random() * 255
            let gc = Math.random() * 255
            let bc = Math.random() * 255
            color = `rgb(${rc},${gc},${bc})`
        }
        this.fill = color
        //this.stroke = 'orangered'
        //this.linewidth = 5
        this.scene2d = scene2d

        scene2d.add(this)
        scene2d.update()

        this.elem = this._renderer.elem
        this.position = this.translation
    }
    move(dx, dy) {
        this.translation.x += dx
        this.translation.y += dy
        this.scene2d.update()
    }
    //events: click,mousedown,mousemove,mouseup
    on(event, callback) {
        this.elem["on" + event] = callback.bind(this)
    }
    off(event) {
        this.elem["on" + event] = null
    }

    stop() {
        if (this.interval !== undefined) {
            console.log("stop!")
            clearInterval(this.interval)
        }
    }
}

class Ball extends Circle {
    constructor(scene2d, cx=72, cy=100, r=10, color) {
        super(scene2d, cx, cy, r, color)
        this.ds = 6
        this.dx = -6 + Math.random()*12
        this.dy = -6 + Math.random()*12
//        this.start()
//        this.on("click", event=>this.explode())
        this.scene2d.balls.push(this)
    }
    explode() {
        this.scene2d.remove(this)
        let b1 = new Ball(this.scene2d,this.position.x,this.position.y,this.radius / 4)
        b1.dx = this.dx
        b1.dy = this.dy
        let b2 = new Ball(this.scene2d,this.position.x,this.position.y,this.radius / 4)
        b2.dx = -this.dx
        b2.dy = this.dy
        let b3 = new Ball(this.scene2d,this.position.x,this.position.y,this.radius / 4)
        b3.dx = this.dx
        b3.dy = -this.dy
        let b4 = new Ball(this.scene2d,this.position.x,this.position.y,this.radius / 4)
        b4.dx = -this.dx
        b4.dy = -this.dy
    }
    stop() {
        clearInterval(this.sc1)
        delete this.sc1
    }
    started() {
        return this.sc1 !== undefined
    }
    start() {
        this.count = 0
        if(this.sc1 === undefined){
        this.sc1 = setInterval(()=>{
            this.run();
            //this.size();
            this.check()
            this.count++
            if(this.count>1000){
                this.stop()
                delete this.count
            }
        }
        , 12)}
    }
    size() {
        if (this.radius < 10) {
            this.ds = 0
        } else if (this.radius > 10) {
            this.ds = -0
        }
        this.radius += this.ds
        this.scene2d.update()
    }
    run() {
        if (this.position.x < 0) {this.position.x = 0.01}
        if (this.position.x > this.scene2d.width) {this.position.x = this.scene2d.width - 0.01}
        if (this.position.y < 0) {this.position.y = 0.01}
        if (this.position.y > this.scene2d.height) {this.position.y = this.scene2d.height - 0.01}
        for (let i = 0; i < this.scene2d.lines.length; i++) {
            let l = this.scene2d.lines[i]
            if (l.hit(this)) {
                if (l.horizontal === false) {
                    if (this.position.x < l.p1.x && this.dx > 0) {
                        this.dx = -this.dx
                    } else if (this.position.x > l.p1.x && this.dx < 0) {
                        this.dx = -this.dx
                    }
                }
                if (l.horizontal === true) {
                    if (this.position.y > l.p1.y && this.dy < 0) {
                        this.dy = -this.dy
                    } else if (this.position.y < l.p1.y && this.dy > 0) {
                        this.dy = -this.dy
                    }
                }
            }
        }
        let b = this.scene2d.main
        let dx = this.position.x-b.position.x
        let dy = this.position.y-b.position.y
        let hypo = Math.sqrt(dx*dx+dy*dy)
            if(hypo <= b.radius+this.radius){
                this.dx = dx/15
                this.dy = dy/15
            }
        super.move(this.dx, this.dy)
    }

    check() {
        if (this.position.y > this.scene2d.height){
            this.remove()
        }
    }
}

class Point {
    constructor(x, y) {
        this.x = x
        this.y = y
    }
}
class Line extends Two.Line {
    constructor(scene2d, p0, p1, width, color) {
        super(p0.x, p0.y, p1.x, p1.y)
        this.p0 = p0
        this.p1 = p1
        this.points = [p0, p1]
        this.scene2d = scene2d
        this.cap = 'round'
        this.linewidth = 10
        this.scene2d.lines.push(this)
        if (width !== undefined) {
            this.linewidth = width
        }
        if (color !== undefined) {
            this.stroke = color
        } else {
            let rc = Math.random() * 10
            let gc = 50 + Math.random() * 200
            let bc = 50 + Math.random() * 200
            this.stroke = `rgb(${rc},${gc},${bc})`
        }
        this.calcBBox()
        this.scene2d.add(this)
        this.scene2d.update()
    }
    hit(circle) {
        if (this.horizontal && 
        circle.position.x >= this.pmin.x && 
        circle.position.x <= this.pmax.x && 
        circle.position.y <= this.pmin.y + circle.radius && 
        circle.position.y >= this.pmax.y - circle.radius) {
            return true
        }

        if (this.horizontal === false && 
        circle.position.y >= this.pmin.y && 
        circle.position.y <= this.pmax.y && 
        circle.position.x >= this.pmin.x - circle.radius && 
        circle.position.x <= this.pmax.x + circle.radius) {
            return true
        }

        return false
    }
    calcBBox() {
        this.horizontal = Math.abs(this.p0.y - this.p1.y) < 0.001
        this.pmin = this.p0
        this.pmax = this.p1
        if (this.horizontal === true && this.p0.x > this.p1.x) {
            this.pmin = this.p1
            this.pmax = this.p0
        }
        if (this.horizontal === false && this.p0.y > this.p1.y) {
            this.pmin = this.p1
            this.pmax = this.p0
        }
    }
    //move 1st or 2nd endpoint(0,1) at a dist {x,y}
    moveEnd(index, dist) {
        this.points[index].x += dist.x
        this.points[index].y += dist.y
        this.vertices[index].addSelf(dist)
        this.calcBBox()
    }
}
/*    drag() {
        this.on("mousedown", e => {
            let start= this.position(e)
            this.on("mousemove", e => {
                let diff = {
                    x: this.position(e).x - this.start.x 
                    y: this.position(e).y - this.start.y
                }
            })
        })

    }
}
*/

/*

function drawRect(scene2d,x=213,y=100,w=100,h=100,color='rgb(0,200,255)') {
    let rect = scene2d.makeRectangle(x,y,w,h)

    rect.fill=color
    rect.opacity=0.75
    rect.noStroke()

    scene2d.update()

    return rect
}

*/

function setup() {
    s = new Scene2D()
  //  spawn = setInterval(e=>{ new Ball(s,200,200,30)},1000)
}
//    c1 = new Ball(s,10,10,40)
//    c1.start()

   // let maze = [[0, 0, 585, 0], [0, 0, 0, 500], [585, 0, 585, 500], [0, 500, 585, 500], [70.2373161212849, 6.510983910891085, 70.2373161212849, 431.51098391089107], [68.2373161212849, 431.51098391089107, 509.2373161212849, 431.51098391089107], [509.2373161212849, 434.51098391089107, 509.2373161212849, 59.510983910891085], [514.237316121285, 60.510983910891085, 138.2373161212849, 60.510983910891085], [138.2373161212849, 53.510983910891085, 138.2373161212849, 363.51098391089107], [144.2373161212849, 364.51098391089107, 435.2373161212849, 364.51098391089107], [435.2373161212849, 368.51098391089107, 435.2373161212849, 126.51098391089108], [440.2373161212849, 125.51098391089108, 200.2373161212849, 125.51098391089108], [200.2373161212849, 120.51098391089108, 200.2373161212849, 303.51098391089107], [204.2373161212849, 303.51098391089107, 347.2373161212849, 303.51098391089107], [348.2373161212849, 304.51098391089107, 348.2373161212849, 260.51098391089107], [353.2373161212849, 276.51098391089107, 353.2373161212849, 180.51098391089107], [357.2373161212849, 178.51098391089107, 254.2373161212849, 178.51098391089107], [255.2373161212849, 184.51098391089107, 255.2373161212849, 240.51098391089107], [258.2373161212849, 240.51098391089107, 299.2373161212849, 240.51098391089107], [148.2373161212849, 46.510983910891085, 148.2373161212849, 60.510983910891085], [52.2373161212849, 50.510983910891085, 74.2373161212849, 50.510983910891085], [5.237316121284899, 93.51098391089108, 32.2373161212849, 93.51098391089108], [48.2373161212849, 154.51098391089107, 73.2373161212849, 154.51098391089107], [5.237316121284899, 219.51098391089107, 19.2373161212849, 219.51098391089107], [72.2373161212849, 260.51098391089107, 40.2373161212849, 260.51098391089107], [7.237316121284899, 220.51098391089107, 23.2373161212849, 220.51098391089107], [9.237316121284898, 305.51098391089107, 23.2373161212849, 305.51098391089107], [40.2373161212849, 333.51098391089107, 70.2373161212849, 333.51098391089107], [9.237316121284898, 375.51098391089107, 28.2373161212849, 375.51098391089107], [49.2373161212849, 408.51098391089107, 68.2373161212849, 408.51098391089107], [9.237316121284898, 443.51098391089107, 25.2373161212849, 443.51098391089107], [48.2373161212849, 464.51098391089107, 48.2373161212849, 493.51098391089107], [99.2373161212849, 433.51098391089107, 99.2373161212849, 458.51098391089107], [139.2373161212849, 470.51098391089107, 139.2373161212849, 500.51098391089107], [188.2373161212849, 436.51098391089107, 188.2373161212849, 466.51098391089107], [244.2373161212849, 484.51098391089107, 247.2373161212849, 493.51098391089107], [248.2373161212849, 466.51098391089107, 248.2373161212849, 491.51098391089107], [299.2373161212849, 434.51098391089107, 299.2373161212849, 460.51098391089107], [338.2373161212849, 465.51098391089107, 338.2373161212849, 494.51098391089107], [398.2373161212849, 431.51098391089107, 398.2373161212849, 465.51098391089107], [438.2373161212849, 473.51098391089107, 438.2373161212849, 505.51098391089107], [490.2373161212849, 431.51098391089107, 490.2373161212849, 461.51098391089107], [527.237316121285, 469.51098391089107, 527.237316121285, 491.51098391089107], [517.237316121285, 419.51098391089107, 547.237316121285, 419.51098391089107], [562.237316121285, 446.51098391089107, 585.237316121285, 446.51098391089107], [569.237316121285, 406.51098391089107, 588.237316121285, 406.51098391089107], [519.237316121285, 379.51098391089107, 552.237316121285, 379.51098391089107], [558.237316121285, 354.51098391089107, 587.237316121285, 354.51098391089107], [518.237316121285, 338.51098391089107, 550.237316121285, 338.51098391089107], [550.237316121285, 306.51098391089107, 598.237316121285, 306.51098391089107], [547.237316121285, 368.51098391089107, 547.237316121285, 368.51098391089107], [517.237316121285, 269.51098391089107, 549.237316121285, 269.51098391089107], [549.237316121285, 239.51098391089107, 589.237316121285, 239.51098391089107], [514.237316121285, 206.51098391089107, 554.237316121285, 206.51098391089107], [549.237316121285, 174.51098391089107, 585.237316121285, 174.51098391089107], [513.237316121285, 141.51098391089107, 548.237316121285, 141.51098391089107], [550.237316121285, 111.51098391089108, 597.237316121285, 111.51098391089108], [519.237316121285, 80.51098391089108, 547.237316121285, 80.51098391089108], [559.237316121285, 50.510983910891085, 589.237316121285, 50.510983910891085], [543.237316121285, 5.510983910891085, 543.237316121285, 29.510983910891085], [507.2373161212849, 4.510983910891085, 507.2373161212849, 19.510983910891085], [478.2373161212849, 5.510983910891085, 478.2373161212849, 30.510983910891085], [438.2373161212849, 3.5109839108910847, 438.2373161212849, 26.510983910891085], [387.2373161212849, 3.5109839108910847, 387.2373161212849, 29.510983910891085], [330.2373161212849, 5.510983910891085, 330.2373161212849, 23.510983910891085], [499.2373161212849, 40.510983910891085, 499.2373161212849, 64.51098391089108], [460.2373161212849, 36.510983910891085, 460.2373161212849, 66.51098391089108], [417.2373161212849, 36.510983910891085, 417.2373161212849, 54.510983910891085], [360.2373161212849, 34.510983910891085, 360.2373161212849, 51.510983910891085], [308.2373161212849, 26.510983910891085, 308.2373161212849, 54.510983910891085], [284.2373161212849, 1.5109839108910847, 284.2373161212849, 21.510983910891085], [259.2373161212849, 6.510983910891085, 259.2373161212849, 26.510983910891085], [234.2373161212849, 5.510983910891085, 234.2373161212849, 30.510983910891085], [212.2373161212849, 4.510983910891085, 212.2373161212849, 28.510983910891085], [192.2373161212849, 5.510983910891085, 192.2373161212849, 24.510983910891085], [168.2373161212849, 3.5109839108910847, 168.2373161212849, 21.510983910891085], [152.2373161212849, 4.510983910891085, 152.2373161212849, 24.510983910891085], [132.2373161212849, 6.510983910891085, 132.2373161212849, 28.510983910891085], [279.2373161212849, 53.510983910891085, 279.2373161212849, 60.510983910891085], [280.2373161212849, 40.510983910891085, 280.2373161212849, 60.510983910891085], [263.2373161212849, 48.510983910891085, 263.2373161212849, 63.510983910891085], [254.2373161212849, 46.510983910891085, 254.2373161212849, 64.51098391089108], [228.2373161212849, 43.510983910891085, 228.2373161212849, 61.510983910891085], [212.2373161212849, 44.510983910891085, 212.2373161212849, 60.510983910891085], [194.2373161212849, 41.510983910891085, 194.2373161212849, 55.510983910891085], [177.2373161212849, 48.510983910891085, 177.2373161212849, 65.51098391089108], [77.2373161212849, 21.510983910891085, 117.2373161212849, 21.510983910891085], [74.2373161212849, 65.51098391089108, 99.2373161212849, 65.51098391089108], [69.2373161212849, 104.51098391089108, 107.2373161212849, 104.51098391089108], [99.2373161212849, 83.51098391089108, 140.2373161212849, 83.51098391089108], [103.2373161212849, 124.51098391089108, 139.2373161212849, 124.51098391089108], [75.2373161212849, 144.51098391089107, 108.2373161212849, 144.51098391089107], [100.2373161212849, 176.51098391089107, 135.2373161212849, 176.51098391089107], [77.2373161212849, 199.51098391089107, 109.2373161212849, 199.51098391089107], [112.2373161212849, 231.51098391089107, 129.2373161212849, 231.51098391089107], [72.2373161212849, 248.51098391089107, 113.2373161212849, 248.51098391089107], [92.2373161212849, 276.51098391089107, 137.2373161212849, 276.51098391089107], [74.2373161212849, 298.51098391089107, 105.2373161212849, 298.51098391089107], [99.2373161212849, 318.51098391089107, 140.2373161212849, 318.51098391089107], [72.2373161212849, 340.51098391089107, 110.2373161212849, 340.51098391089107], [94.2373161212849, 361.51098391089107, 143.2373161212849, 361.51098391089107], [90.2373161212849, 384.51098391089107, 90.2373161212849, 431.51098391089107], [145.2373161212849, 365.51098391089107, 145.2373161212849, 393.51098391089107], [124.2373161212849, 401.51098391089107, 124.2373161212849, 430.51098391089107], [164.2373161212849, 410.51098391089107, 164.2373161212849, 434.51098391089107], [184.2373161212849, 373.51098391089107, 184.2373161212849, 414.51098391089107], [202.2373161212849, 399.51098391089107, 202.2373161212849, 431.51098391089107], [237.2373161212849, 370.51098391089107, 237.2373161212849, 398.51098391089107], [272.2373161212849, 405.51098391089107, 272.2373161212849, 440.51098391089107], [313.2373161212849, 361.51098391089107, 313.2373161212849, 399.51098391089107], [345.2373161212849, 394.51098391089107, 345.2373161212849, 426.51098391089107], [387.2373161212849, 363.51098391089107, 387.2373161212849, 396.51098391089107], [422.2373161212849, 395.51098391089107, 422.2373161212849, 430.51098391089107], [442.2373161212849, 359.51098391089107, 469.2373161212849, 359.51098391089107], [464.2373161212849, 391.51098391089107, 464.2373161212849, 423.51098391089107], [490.2373161212849, 399.51098391089107, 490.2373161212849, 430.51098391089107], [488.2373161212849, 369.51098391089107, 513.237316121285, 369.51098391089107], [489.2373161212849, 341.51098391089107, 512.237316121285, 341.51098391089107], [442.2373161212849, 306.51098391089107, 470.2373161212849, 306.51098391089107], [514.237316121285, 295.51098391089107, 487.2373161212849, 295.51098391089107], [442.2373161212849, 271.51098391089107, 467.2373161212849, 271.51098391089107], [475.2373161212849, 254.51098391089107, 513.237316121285, 254.51098391089107], [440.2373161212849, 224.51098391089107, 484.2373161212849, 224.51098391089107], [457.2373161212849, 203.51098391089107, 508.2373161212849, 203.51098391089107], [442.2373161212849, 174.51098391089107, 482.2373161212849, 174.51098391089107], [455.2373161212849, 146.51098391089107, 514.237316121285, 146.51098391089107], [443.2373161212849, 125.51098391089108, 483.2373161212849, 125.51098391089108], [487.2373161212849, 64.51098391089108, 487.2373161212849, 103.51098391089108], [452.2373161212849, 63.510983910891085, 452.2373161212849, 103.51098391089108], [419.2373161212849, 60.510983910891085, 419.2373161212849, 89.51098391089108], [484.2373161212849, 251.51098391089107, 484.2373161212849, 256.51098391089107], [387.2373161212849, 100.51098391089108, 387.2373161212849, 133.51098391089107], [363.2373161212849, 61.510983910891085, 363.2373161212849, 100.51098391089108], [335.2373161212849, 86.51098391089108, 335.2373161212849, 130.51098391089107], [305.2373161212849, 63.510983910891085, 305.2373161212849, 94.51098391089108], [289.2373161212849, 85.51098391089108, 289.2373161212849, 125.51098391089108], [257.2373161212849, 61.510983910891085, 257.2373161212849, 103.51098391089108], [232.2373161212849, 86.51098391089108, 232.2373161212849, 125.51098391089108], [212.2373161212849, 63.510983910891085, 212.2373161212849, 91.51098391089108], [203.2373161212849, 85.51098391089108, 203.2373161212849, 96.51098391089108], [170.2373161212849, 123.51098391089108, 199.2373161212849, 123.51098391089108], [178.2373161212849, 61.510983910891085, 178.2373161212849, 101.51098391089108], [140.2373161212849, 145.51098391089107, 178.2373161212849, 145.51098391089107], [157.2373161212849, 171.51098391089107, 198.2373161212849, 171.51098391089107], [145.2373161212849, 185.51098391089107, 158.2373161212849, 185.51098391089107], [155.2373161212849, 206.51098391089107, 198.2373161212849, 206.51098391089107], [138.2373161212849, 228.51098391089107, 172.2373161212849, 228.51098391089107], [160.2373161212849, 256.51098391089107, 200.2373161212849, 256.51098391089107], [147.2373161212849, 288.51098391089107, 182.2373161212849, 288.51098391089107], [202.2373161212849, 300.51098391089107, 202.2373161212849, 333.51098391089107], [148.2373161212849, 318.51098391089107, 180.2373161212849, 318.51098391089107], [172.2373161212849, 335.51098391089107, 172.2373161212849, 351.51098391089107], [229.2373161212849, 325.51098391089107, 229.2373161212849, 358.51098391089107], [257.2373161212849, 309.51098391089107, 257.2373161212849, 331.51098391089107], [295.2373161212849, 324.51098391089107, 295.2373161212849, 353.51098391089107], [332.2373161212849, 301.51098391089107, 332.2373161212849, 323.51098391089107], [359.2373161212849, 326.51098391089107, 359.2373161212849, 355.51098391089107], [348.2373161212849, 303.51098391089107, 407.2373161212849, 303.51098391089107], [405.2373161212849, 316.51098391089107, 405.2373161212849, 333.51098391089107], [407.2373161212849, 306.51098391089107, 407.2373161212849, 318.51098391089107], [358.2373161212849, 280.51098391089107, 392.2373161212849, 280.51098391089107], [374.2373161212849, 254.51098391089107, 433.2373161212849, 254.51098391089107], [359.2373161212849, 229.51098391089107, 393.2373161212849, 229.51098391089107], [389.2373161212849, 210.51098391089107, 434.2373161212849, 210.51098391089107], [359.2373161212849, 186.51098391089107, 400.2373161212849, 186.51098391089107], [397.2373161212849, 163.51098391089107, 437.2373161212849, 163.51098391089107], [382.2373161212849, 129.51098391089107, 382.2373161212849, 163.51098391089107], [365.2373161212849, 130.51098391089107, 365.2373161212849, 153.51098391089107], [350.2373161212849, 143.51098391089107, 350.2373161212849, 168.51098391089107], [330.2373161212849, 130.51098391089107, 330.2373161212849, 149.51098391089107], [313.2373161212849, 154.51098391089107, 313.2373161212849, 168.51098391089107], [297.2373161212849, 124.51098391089108, 297.2373161212849, 139.51098391089107], [283.2373161212849, 150.51098391089107, 283.2373161212849, 173.51098391089107], [265.2373161212849, 129.51098391089107, 265.2373161212849, 143.51098391089107], [255.2373161212849, 153.51098391089107, 255.2373161212849, 170.51098391089107], [237.2373161212849, 126.51098391089108, 237.2373161212849, 150.51098391089107], [208.2373161212849, 165.51098391089107, 225.2373161212849, 165.51098391089107], [234.2373161212849, 190.51098391089107, 249.2373161212849, 190.51098391089107], [202.2373161212849, 209.51098391089107, 223.2373161212849, 209.51098391089107], [237.2373161212849, 230.51098391089107, 257.2373161212849, 230.51098391089107], [203.2373161212849, 253.51098391089107, 240.2373161212849, 253.51098391089107], [243.2373161212849, 256.51098391089107, 243.2373161212849, 291.51098391089107], [272.2373161212849, 265.51098391089107, 272.2373161212849, 300.51098391089107], [294.2373161212849, 243.51098391089107, 294.2373161212849, 260.51098391089107], [315.2373161212849, 274.51098391089107, 315.2373161212849, 301.51098391089107], [330.2373161212849, 265.51098391089107, 349.2373161212849, 265.51098391089107], [338.2373161212849, 245.51098391089107, 358.2373161212849, 245.51098391089107], [303.2373161212849, 243.51098391089107, 323.2373161212849, 243.51098391089107]]
   // let balls = [[277,283,40],[318.23731612128495,275.51098391089107,30],[322,232,13],[220,286,13],[322,232,13],[319,139,13],[375.23731612128495,146.51098391089107,7.5],[426.23731612128495,197.51098391089107,7.5],[228.23731612128495,221.51098391089107,7.5],[528.237316121285,353.51098391089107,7.5],[37.2373161212849,68.51098391089108,30],[340.23731612128495,203.51098391089107,7.5],[346.23731612128495,323.51098391089107,7.5],[16.23731612128489,455.51098391089107,7.5],[190.23731612128495,317.51098391089107,7.5],[555.237316121285,363.51098391089107,30],[345.23731612128495,375.51098391089107,7.5],[300.23731612128495,276.51098391089107,7.5],[300.23731612128495,390.51098391089107,7.5],[354.23731612128495,84.51098391089107,7.5],[419.2373161212849,31.510983910891085,30],[152.2373161212849,40.510983910891085,7.5],[149.2373161212849,37.510983910891085,7.5],[434.2373161212849,52.510983910891085,7.5],[161.2373161212849,49.510983910891085,7.5],[149.2373161212849,393.51098391089107,30],[227.2373161212849,195.51098391089107,7.5],[146.2373161212849,252.51098391089107,7.5],[488.2373161212849,240.51098391089107,7.5],[224.2373161212849,312.51098391089107,7.5],[35.2373161212849,58.510983910891085,30],[35.23731612128489,64.51098391089107,7.5],[266.23731612128495,481.51098391089107,7.5],[290.23731612128495,457.51098391089107,7.5],[29.23731612128489,118.51098391089107,7.5],[29.2373161212849,59.510983910891085,30],[38.23731612128489,308.51098391089107,7.5],[62.23731612128489,32.51098391089107,7.5],[35.23731612128489,107.51098391089107,7.5],[35.23731612128489,65.51098391089107,7.5],[306.2373161212849,276.51098391089107,30],[476.2373161212849,289.51098391089107,30],[452.2373161212849,133.51098391089107,7.5],[464.2373161212849,163.51098391089107,7.5],[497.2373161212849,82.51098391089107,7.5],[458.2373161212849,217.51098391089107,7.5],[372.2373161212849,138.51098391089107,7.5],[405.2373161212849,225.51098391089107,7.5],[375.2373161212849,141.51098391089107,7.5],[312.2373161212849,336.51098391089107,7.5],[27.2373161212849,41.510983910891085,30],[51.23731612128489,359.51098391089107,7.5],[252.2373161212849,452.51098391089107,7.5],[15.237316121284891,455.51098391089107,7.5],[21.23731612128489,467.51098391089107,7.5],[30.2373161212849,50.510983910891085,30],[216.2373161212849,488.51098391089107,7.5],[156.2373161212849,440.51098391089107,7.5],[54.23731612128489,428.51098391089107,7.5],[24.23731612128489,482.51098391089107,7.5],[51885.23731612129,-51882.48901608911,1.875],[51927.23731612129,-51876.48901608911,1.875],[51189.23731612129,51557.51098391089,1.875],[-51227.76268387871,-51255.48901608911,1.875]]
   //   maze.forEach(l=>new Line(s,new Point(l[0],l[1]),new Point(l[2],l[3])))
   //   balls.forEach(b=>new Ball(s,b[0],b[1],b[3]))
    /*
    c1 = new Circle(s)

    c1.on("mousedown", function(e) {
        c1.x = e.x;
        c1.y = e.y;
        c1.on("mousemove", (e)=>{
            c1.move(e.x - c1.x, e.y - c1.y)
            c1.x = e.x;
            c1.y = e.y
        }
        )
    })

    c1.on("mouseup", function() {
        c1.off("mousemove")
        delete c1.x
        delete c1.y
    })

    c1.on("click", function(e) {
        console.log(`click: ${e.x}:${e.y}`)
        if (c1.interval !== undefined) {
            clearInterval(c1.interval);
            delete c1.interval
            delete c1.dx
            delete c1.dy
            return
        }
        c1.dx = 10;
        c1.dy = 10
        c1.interval = setInterval(function() {
            c1.move(c1.dx, c1.dy)
            if (c1.translation.x < 0 && c1.dx < 0) {
                c1.dx = -c1.dx
            }
            if (c1.translation.x > c1.scene2d.width && c1.dx > 0) {
                c1.dx = -c1.dx
            }
            if (c1.translation.y < 0 && c1.dy < 0) {
                c1.dy = -c1.dy
            }
            if (c1.translation.y > c1.scene2d.height && c1.dy > 0) {
                c1.dy = -c1.dy
            }
        }, 50)
    })
    /*
    /*
    s.on("dblclick", function(e) {
        console.log(`center: ${e.x}:${e.y}`)
        let center = s.position(e)
        new Ball(this,center.x,center.y)
    })
    */
    //for(let i=0;i<30;i++) {
    //let b=new Ball(s,10*i,10*i,30);b.start()
    //}



window.onload = setup
